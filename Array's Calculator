#include<iostream>
//program made to use various functions of array as a calculator.....
//insertion of elements in arrays is done one by one;
using namespace std;

class array{
    int *A;
    int size;
    int length;
    public:

    array(){
        size=10;
        length=0;
        A=new int(size);
    }

    array(int sz){
        size=sz;
        length=0;
        A=new int(size);
    }

    ~array(){
        delete []A;
    }

    void display(){
        for(int i=0;i<length;i++){
            cout<<A[i];
        }cout<<endl;
    }

    void insert(int i,int x){
        if(length<size){
            for(int j=length;j>i;j--){
                A[j]=A[j-1];
            }
            A[i]=x;
            length++;
        }
    }

    void add(int x){
        if(length<size){
            A[length]=x;
            length++;
        }
    }

    void del(int i){
        for(int j=i;j<length;j++){
            A[j]=A[j+1];
        }
        length--;
    }

    void lsearch(int x){//transposition and moving to head are some improvements in lsearch
        int i;
        for(i=0;i<length;i++){
            if(A[i]==x){
                cout<<i<<endl;
                break;
            }
        }
        if(i==length){
            cout<<"element not present";
        }
    }

    void sort(){
        for(int i=0;i<length;i++){
            for(int j=i+1;j<length;j++){
                if(A[j]<A[i]){
                    int temp=A[i];
                    A[i]=A[j];
                    A[j]=temp;
                }
            }
        }
    }

    void bsearch(int x){
        int s=0;
        int e=length-1;
        int mid;
        while(s<=e){
            mid=(s+e)/2;
            if(A[mid]==x){
                cout<<mid;
                break;
            }else if(A[mid]>x){
                e=mid-1;
            }else{
                s=mid+1;
            }
        }
        if(s>e){
            cout<<"element not present";
        }
    }

    int get(int i){
        return A[i];
    }

    void set(int i,int x){
        A[i]=x;
    }

    int sum(int n){
        int s=0;
        if(n<=length){
            for(int i=0;i<n;i++){
                s+=A[i];
            }
        }return s;
    }

    float avg(int n){
        float a=(float)sum(n)/n;
        return a;
    }

    int max(){
        int m=A[0];
            for(int i=1;i<length;i++){
                if(A[i]>m){
                    m=A[i];
                }
            }
        return m;
    }

    int min(){
        int m=A[0];
            for(int i=1;i<length;i++){
                if(A[i]<m){
                    m=A[i];
                }
            }
        return m;
    }

    void minmax(){
        int min=A[0];
        int max=A[0];
        for(int i=1;i<length;i++){
            if(A[i]<min){
                min=A[i];
            }else{
                if(A[i]>max){
                    max=A[i];
                }
            }
        }
        cout<<min;
        cout<<max;
    }

    void reverse1(){
        int s=0;
        int e=length-1;
        while(s<=e){
            int temp=A[s];
            A[s]=A[e];
            A[e]=temp;
            s++;
            e--;
        }
    }

    void reverse2(){
        int *B=new int(length);//auxillary array is created greater space and time complexity
        int j=0;
        for(int i=length-1;i>=0;i--){
            B[j]=A[i];
            j++;
        }
        delete []A;
        A=B;
        B=NULL;
    }

    void leftshift(int x){
        for(int i=x;i<length;i++){
            A[i-x]=A[i];
        }
        for(int i=length-x;i<length;i++){
            A[i]=0;
        }
    }

    void rightshift(int x){
        for(int i=length-1;i>=x;i--){
            A[i]=A[i-x];
        }
        for(int i=0;i<x;i++){
            A[i]=0;
        }
    }

    void leftrotate(int k){
        int B[k];
        for(int i=0;i<k;i++){
            B[i]=A[i];
        }
        for(int i=k;i<length;i++){
            A[i-k]=A[i];
        }
        for(int i=k+1;i<length;i++){
            A[i]=B[i-k-1];
        }
    }

    void rightrotate(int k){
        int B[k];
        for(int i=0;i<k;i++){
            B[i]=A[length-k+i];
        }
        for(int i=length-1;i>=k;i--){
            A[i]=A[i-k];
        }
        for(int i=0;i<k;i++){
            A[i]=B[i];
        }
    }

    void insort(int n){
        if(length<size){
            for(int i=length-1;i>=0;i--){
                if(n<A[i]){
                    A[i+1]=A[i];
                }else{
                    A[i+1]=n;
                    break;
                }
            }
            length++;
        }
    }

    void issort(){
        int i;
        for(i=0;i<length-1;i++){
            if(A[i]>A[i+1]){
                break;
            }
        }
        if(i==length-1){
            cout<<"sorted";
        }else{
            cout<<"not sorted";
        }
    }

    void negative(){
        int i=0;
        int j=length-1;
        while(i<=j){
            if(A[i]>=0&&A[j]<0){
                int temp=A[i];
                A[i]=A[j];
                A[j]=temp;
                i++;
                j--;
            }else if(A[i]>=0&&A[j]>=0){
                j--;
            }else if(A[i]<0&&A[j]<0){
                i++;
            }else{
                i++;
                j--;
            }   
        }
    }

    array *merge(array *B){
        int i=0;
        int j=0;
        int k=0;
        array *C;
        C->length=this->length+B->length;
        C->A=new int(C->length);
        while(i<length&&j<B->length){
            if(A[i]<=(B->A[j])){
                C->A[k]=A[i];
                i++;
                k++;
            }else{
                C->A[k]=B->A[j];
                k++;
                j++;
            }
        }
        for(;i<length;i++){
            C->A[k]=A[i];
            k++;
        }
        for(;j<B->length;j++){
            C->A[k]=B->A[j];
            k++;
        }
        return C;  
    }

    array* uni(array *B){
        int i=0;
        int j=0;
        int k=0;
        array *C;
        C->size=this->length+B->length;
        C->A=new int(C->size);
        while(i<length&&j<B->length){
            if(A[i]<(B->A[j])){
                C->A[k]=A[i];
                i++;
                k++;
            }else if(A[i]>(B->A[j])){
                C->A[k]=B->A[j];
                k++;
                j++;
            }else{
                C->A[k]=A[i];
                k++;
                i++;
                j++;
            }
        }
        for(;i<length;i++){
            C->A[k]=A[i];
            k++;
        }
        for(;j<B->length;j++){
            C->A[k]=B->A[j];
            k++;
        }
        C->length=k;
        return C;  
    }

    array* intersection(array *B){
        int i=0;
        int j=0;
        int k=0;
        array *C;
        C->size=this->length+B->length;
        C->A=new int(C->size);
        while(i<length&&j<B->length){
            if(A[i]<(B->A[j])){
                i++;
            }else if(A[i]>(B->A[j])){
                j++;
            }else{
                C->A[k]=A[i];
                k++;
                i++;
                j++;
            }
        }
        C->length=k;
        return C;  
    }

    array* difference(array *B){
        int i=0;
        int j=0;
        int k=0;
        array *C;
        C->size=this->length+B->length;
        C->A=new int(C->size);
        while(i<length&&j<B->length){
            if(A[i]<(B->A[j])){
                C->A[k]=A[i];
                i++;
                k++;
            }else if(A[i]>(B->A[j])){
                j++;
            }else{
                i++;
                j++;
            }
        }
        for(;i<length;i++){
            C->A[k]=A[i];
            k++;
        }
        C->length=k;
        return C;  
    }

    int singlemiss(){
        int diff=A[0]-0;
        for(int i=1;i<length;i++){
            if(A[i]-i!=diff){
                return i+diff;
            }
        }
        return -1;
    }

    void multiplemiss(){
        int diff=A[0]-0;
        for(int i=1;i<length;i++){
            if(A[i]-i!=diff){
                while(diff<A[i]-i){
                    cout<<i+diff<<endl;
                    diff++;
                }
            }
        }
    }

    void hashing(){
        int H[max()+1]={0};
        for(int i=0;i<length;i++){
            H[A[i]]++;
        }
        for(int i=min();i<=max();i++){
            if(H[i]==0){
                cout<<i;
            }
        }
    }

    void sduplicate(){  
        int last=0;
        for(int i=0;i<length-1;i++){
            if(A[i]==A[i+1]&&A[i]!=last){
                cout<<A[i];
                last=A[i];
            }
        }
    }

    void uduplicate(){
        for(int i=0;i<length-1;i++){
            int count=1;    
            if(A[i]!=-1){
                for(int j=i+1;j<length;j++){
                    if(A[i]==A[j]){
                        count++;
                        A[j]=-1;
                    }
                }
                if(count>1){
                    cout<<A[i]<<count;
                }
            }
        }
    }

    void hashingduplicate(){
        int H[max()+1]={0};
        for(int i=0;i<length;i++){
                H[A[i]]++;
        }
        for(int i=min();i<max()+1;i++){
            if(H[i]>1){
                cout<<i<<" "<<H[i];
            }
        }
    }

    void ksum(int n){
        for(int i=0;i<length-1;i++){
            for(int j=i+1;j<length;j++){
                if(A[i]+A[j]==n){
                    cout<<A[i]<<" "<<A[j];
                }
            }
        }
    }

    void ksum1(int n){  
        int H[max()]={0};
        for(int i=0;i<length;i++){
            H[A[i]]++;
        }
        for(int i=min();i<=max();i++){
            if(H[n-i]!=0&&H[i]!=0&&i!=n-i){
                cout<<i<<" "<<n-i;
                H[i]--;
            }else if(i==n-i){
                if(H[i]==2){
                    cout<<i<<" "<<n-i;
                    H[i]=0;
                }
            }
        }
    }

    void sortedsumk(int k){
        int i=0;
        int j=length-1;
        while(i<j){
            if(A[i]+A[j]==k){
                cout<<A[i]<<" "<<A[j];
                i++;
                j--;
            }else if(A[i]+A[j]<k){
                i++;
            }else{
                j--;
            }
        }
    }

};

int main(){
    int z;
    while(z>-1){
        cout<<"0:create array\n";
        cout<<"To access A : 1\n";
        cout<<"To access B : 2\n";
        cout<<"Enter -1 to turn off calculator\n";
        cin>>z;
        array A,B;
        switch(z){
        case 0:{
            int i;
            cout<<"Enter array number\n1: A\n2: B\n";
            cin>>i;
            switch(i){
                case 1:{
                    int size;
                    cout<<"Enter size: ";
                    cin>>size;
                    array A(size);
                    break;
                }
                case 2:{
                    int size;
                    cout<<"Enter size: ";
                    cin>>size;
                    array B(size);
                    break;
                }
            }
            break;
        } 
        case 1:{
            int j;
            cout<<"1:add number\n2:delete number\n3:display\n4:min\n5:max\n6:leftshift\n7:rightshift\n8:rightrotate\n9:leftrotate\n10:lsearch\n";
            cout<<"11:sort\n12:bsearch\n13:sum\n14:avg\n15:reverse1\n16:set value\n17:insert in sorted array\n18:issort\n19:negative\n20:singlemiss\n21:multiple miss\n22:hashing\n23:hashingduplicate\n24:target sum\n25:target sum in sorted array\n";
            cout<<"26:union of A and B\n27:Intersection of A&B\n28:merge A and B\n29:difference of A and B\n30:Get a value at ndex";
            cout<<"enter 0 to stop performing\n";
            while(j>0){
                cin>>j;
                switch(j){
                case 1:{
                    int num;
                    cout<<"Enter element to be inserted: ";
                    cin>>num;
                    A.add(num);
                    break;
                }
                case 2:{
                    int n;
                    cout<<"Enter index from which element to be deleted: ";
                    cin>>n;
                    A.del(n);
                    break;
                }
                case 3:{
                    A.display();
                    break;
                }
                case 4:{
                    cout<<A.min();
                    break;
                }
                case 5:{
                    cout<<A.max();
                    break;
                }
                case 6:{
                    int n;
                    cout<<"Number of left shifts: ";
                    cin>>n;
                    A.leftshift(n);
                    break;
                }
                case 7:{
                    int n;
                    cout<<"Number of right shifts: ";
                    cin>>n;
                    A.rightshift(n);
                    break;
                }
                case 8:{
                    int n;
                    cout<<"Right rotate by: ";
                    cin>>n;
                    A.rightrotate(n);
                    break;
                }
                case 9:{
                    int n;
                    cout<<"Left rotate by: ";
                    cin>>n;
                    A.leftrotate(n);
                    break;
                }
                case 10:{
                    int n;
                    cout<<"Enter element to be searched: ";
                    cin>>n;
                    A.lsearch(n);
                    break;
                }
                case 11:{
                    A.sort();
                    break;
                }
                case 12:{
                    A.sort();
                    int n;
                    cout<<"Enter element to be searched: ";
                    cin>>n;
                    A.bsearch(n);
                    break;
                }
                case 13:{
                    int n;
                    cout<<"Enter number of elements whose sum to be calculated: ";
                    cin>>n;
                    cout<<A.sum(n);
                    break;
                }
                case 14:{
                    int n;
                    cout<<"Enter number of elements whose average to be calculated: ";
                    cin>>n;
                    cout<<A.avg(n);
                    break;
                }
                case 15:{
                    A.reverse1();
                    break;
                }
                case 16:{
                    int i,n;
                    cout<<"Enter index and element: ";
                    cin>>i>>n;
                    A.set(i,n);
                    break;
                }
                case 17:{
                    A.sort();
                    int n;
                    cout<<"Enter element to be inserted: ";
                    cin>>n;
                    A.insort(n);
                    break;
                }
                case 18:{
                    A.issort();
                    break;
                }
                case 19:{
                    A.negative();
                    break;
                }
                case 20:{
                    cout<<A.singlemiss();
                    break;
                }
                case 21:{
                    A.multiplemiss();
                    break;
                }
                case 22:{
                    A.hashing();
                    break;
                }
                case 23:{
                    A.hashingduplicate();
                    break;
                }
                case 24:{
                    int n;
                    cout<<"Enter target sum to be achieved: ";
                    cin>>n;
                    A.ksum1(n);
                    break;
                }
                case 25:{
                    int n;
                    cout<<"Enter target sum to be achieved: ";
                    cin>>n;
                    A.sortedsumk(n);
                    break;
                }
                case 26:{
                    array *C;
                    C=A.uni(&B);
                    C->display();
                    break;
                }
                case 27:{
                    array *C;
                    C=A.intersection(&B);
                    C->display();
                    break;
                }
                case 28:{
                    array *C;
                    C=A.merge(&B);
                    C->display();
                    break;
                }
                case 29:{
                    array *C;
                    C=A.difference(&B);
                    C->display();
                    break;
                }
                case 30:{
                    int i;
                    cout<<"Enter the index: ";
                    cin>>i;
                    A.get(i);
                    break;
                }
                }
            }
        }
        case 2:{
            int j;
            cout<<"1:add number\n2:delete number\n3:display\n4:min\n5:max\n6:leftshift\n7:rightshift\n8:rightrotate\n9:leftrotate\n10:lsearch\n";
            cout<<"11:sort\n12:bsearch\n13:sum\n14:avg\n15:reverse1\n16:set\n17:insert in sorted array0\n18:issort\n19:negative\n20:singlemiss\n21:multiple miss\n22:hashing\n23:hashingduplicate\n24:target sum\n25:target sum in sorted array\n";
            cout<<"26:union of A and B\n27:Intersection of A&B\n28:merge A and B\n29:difference of A and B\n30:Get element at particular index\n";
            cout<<"enter 0 to stop performing\n";
            while(j>0){
                cin>>j;
                switch(j){
                case 1:{
                    int num;
                    cout<<"Enter number to be inserted: ";
                    cin>>num;
                    B.add(num);
                    break;
                }
                case 2:{
                    int n;
                    cout<<"Enter index from which element to be deleted: ";
                    cin>>n;
                    B.del(n);
                    break;
                }
                case 3:{
                    B.display();
                    break;
                }
                case 4:{
                    cout<<B.min();
                    break;
                } 
                case 5:{
                    cout<<B.max();
                    break;
                }
                case 6:{
                    int n;
                    cout<<"Number of left shifts: ";
                    cin>>n;
                    B.leftshift(n);
                    break;
                }
                case 7:{
                    int n;
                    cout<<"Number of right shifts: ";
                    cin>>n;
                    B.rightshift(n);
                    break;
                }
                case 8:{
                    int n;
                    cout<<"Right rotate by: ";
                    cin>>n;
                    B.rightrotate(n);
                    break;
                }
                case 9:{
                    int n;
                    cout<<"Left rotate by: ";
                    cin>>n;
                    B.leftrotate(n);
                    break;
                }
                case 10:{
                    int n;
                    cout<<"Enter element to be searched: ";
                    cin>>n;
                    B.lsearch(n);
                    break;
                }
                case 11:{
                    B.sort();
                    break;
                }
                case 12:{
                    B.sort();
                    int n;
                    cout<<"Enter element to be searched: ";
                    cin>>n;
                    B.bsearch(n);
                    break;
                }
                case 13:{
                    int n;
                    cout<<"Enter number of elements whose sum to be calculated: ";
                    cin>>n;
                    cout<<B.sum(n);
                    break;
                }
                case 14:{
                    int n;
                    cout<<"Enter number of elements whose average to be calculated: ";
                    cin>>n;
                    cout<<B.avg(n);
                    break;
                }
                case 15:{
                    B.reverse1();
                    break;
                }
                case 16:{
                    int i,n;
                    cout<<"Enter index and element: ";
                    cin>>i>>n;
                    B.set(i,n);
                    break;
                }
                case 17:{
                    B.sort();
                    int n;
                    cout<<"Enter element to be added in array: ";
                    cin>>n;
                    B.insort(n);
                    break;
                }
                case 18:{
                    B.issort();
                    break;
                }
                case 19:{
                    B.negative();
                    break;
                }
                case 20:{
                    cout<<B.singlemiss();
                    break;
                }
                case 21:{
                    B.multiplemiss();
                    break;
                }
                case 22:{
                    B.hashing();
                    break;
                }
                case 23:{
                    B.hashingduplicate();
                    break;
                }
                case 24:{
                    int n;
                    cout<<"Enter target sum to be achieved: ";
                    cin>>n;
                    B.ksum1(n);
                    break;
                }
                case 25:{
                    int n;
                    cout<<"Enter target sum to be achieved: ";
                    cin>>n;
                    B.sortedsumk(n);
                    break;
                }
                case 26:{
                    array *C;
                    C=B.uni(&A);
                    C->display();
                    break;
                }
                case 27:{
                    array *C;
                    C=B.intersection(&A);
                    C->display();
                    break;
                }
                case 28:{
                    array *C;
                    C=B.merge(&A);
                    C->display();
                    break;
                }
                case 29:{
                    array *C;
                    C=B.difference(&A);
                    C->display();
                    break;
                }
                case 30:{
                    int i;
                    cout<<"Enter the index: ";
                    cin>>i;
                    B.get(i);
                    break;
                }
                }
            }
        }
        }
    }
}
